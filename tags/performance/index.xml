<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>performance on mjec&#39;s electric blogaloo</title>
    <link>https://mjec.blog/tags/performance/</link>
    <description>Recent content in performance on mjec&#39;s electric blogaloo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Apr 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mjec.blog/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>My Haskell was slow</title>
      <link>https://mjec.blog/2016/04/12/my-haskell-was-slow/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mjec.blog/2016/04/12/my-haskell-was-slow/</guid>
      <description>I have a Haskell function that builds frequency tables. It is very slow (and not very good). Originally this post was to look at why, and try to find a way to speed it up.
It turns out that GHC (the Haskell compiler) includes some nice profiling tools. You can set &amp;ldquo;cost centres&amp;rdquo; you want to look at using the {-# SCC &amp;quot;cost-centre-name&amp;quot; #-} pragma. So that&amp;rsquo;s what I did, and I have ended up with this:</description>
    </item>
    
  </channel>
</rss>